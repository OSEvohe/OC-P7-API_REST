nelmio_api_doc:
  documentation:
    info:
      title: Bilemo Api
      description: This is your Smartphone Catalog
      version: 1.0.0
    security:
      - Bearer: [ ]
    components:
      securitySchemes:
        Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      schemas:
        _links:
          type: object
          properties:
            rel:
              type: object
              properties:
                href:
                  type: string
                method:
                  type: string
        page:
          type: object
          properties:
            size:
              type: integer
            totalElements:
              type: integer
            totalPages:
              type: integer
            number:
              type: integer
        Brands:
          type: object
          properties:
            page:
              ref: "#/components/schemas/page"
            _links:
              ref: "#/components/schemas/_links"
            _embedded:
              type: object
              properties:
                brands:
                  type: array
                  items:
                    ref: "#/components/schemas/BrandsIndex"
        Products:
          type: object
          properties:
            page:
              ref: "#/components/schemas/page"
            _links:
              ref: "#/components/schemas/_links"
            _embedded:
              type: object
              properties:
                products:
                  type: array
                  items:
                    ref: "#/components/schemas/ProductsIndex"
        Users:
          type: object
          properties:
            page:
              ref: "#/components/schemas/page"
            _links:
              ref: "#/components/schemas/_links"
            _embedded:
              type: object
              properties:
                users:
                  type: array
                  items:
                    ref: "#/components/schemas/UsersIndex"
        Companies:
          type: object
          properties:
            page:
              ref: "#/components/schemas/page"
            _links:
              ref: "#/components/schemas/_links"
            _embedded:
              type: object
              properties:
                companies:
                  type: array
                  items:
                    ref: "#/components/schemas/CompaniesIndex"
        JWTTokenMissing:
          type: object
          properties:
            code:
              type: integer
              const: 401
            message:
              type: string
              const: "JWT Token not found"
        JWTTokenExpired:
          type: object
          properties:
            code:
              type: integer
              const: 401
            message:
              type: string
              const: "JWT Token Expired"
        JWTTokenInvalid:
          type: object
          properties:
            code:
              type: integer
              const: 401
            message:
              type: string
              const: "Invalid JWT Token"


      requestBodies:
        LoginCheck:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: "string"
                  password:
                    type: "string"
              example:
                username: admin
                password: PassWord1234!
        NewBrand:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: "string"
                    minLength: 2
                    maxLength: 100
        UpdateBrand:
          ref: "#/components/requestBodies/NewBrand"
        NewProduct:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    minLength: 2
                    maxLength: 100
                  price:
                    type: number
                    format: float
                    maximum: 99999.99
                    description : "Price with up to 2 decimal digits"
                  description:
                    type: string
                    minLength: 2
                    maxLength: 65535
                  brand:
                    type: integer
                    description: "Brand Id"
        UpdateProduct:
          ref: "#/components/requestBodies/NewProduct"
        NewUser:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  firstName:
                    type: string
                    minLength: 2
                    maxLength: 100
                  lastName:
                    type: string
                    minLength: 2
                    maxLength: 100
        UpdateUser:
          ref: "#/components/requestBodies/NewUser"
        NewCompany:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    minLength: 2
                    maxLength: 100
                  username:
                    type: string
                    minLength: 3
                    maxLength: 30
                  plainPassword:
                    type: string
                    minLength: 8
                    maxLength: 255
                    description: "Password need at least 8 characters, lower and upper case letters, one number and one special character"
        UpdateCompany:
          ref: "#/components/requestBodies/NewCompany"




      parameters:
        pageNumber:
          name: page
          in: path
          description: "Page number"
          required: true
          schema:
            type: integer
            default: 1
            example: 1
        limit:
          name: limit
          in: path
          description: "Number of items per page"
          required: true
          schema:
            type: integer
            default: 10
            example: 10
        id:
          name: id
          in: path
          description : "Item Id"
          required: true
          schema:
            type: integer
      responses:
        BadParameters:
          description: "Invalid Url parameters or required fields missing/invalid"
        readProduct:
          description: "Details of the product"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/Product"
        listProduct:
          description: "List of products"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/Products"
        updateProduct:
          description: "Product updated"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/Product"
        NewProduct:
          description: "New product created"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/Product"
        readBrand:
          description: "Details of the Brand"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/Brand"
        listUsers:
          description: "List of users"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/Users"
        readUser:
          description: "User's details"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/User"
        NewUser:
          description: "New user created"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/User"
        UpdateUser:
          description: "User updated"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/User"
        listCompanies:
          description: "List of companies"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/Companies"
        readCompany:
          description: "Company's details"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/Company"
        NewCompany:
          description: "New company created"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/Company"
        UpdateCompany:
          description: "Company updated"
          content:
            application/json:
              schema:
                ref: "#/components/schemas/Company"
        Token:
          description: "Your JWT Token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2MDgwNDYyODMsImV4cCI6MTYwODA0OTg4Mywicm9sZXMiOlsiUk9MRV9TVVBFUl9BRE1JTiIsIlJPTEVfVVNFUiJdLCJ1c2VybmFtZSI6ImFkbWluIn0.EIDwKcavSnS0MJSFy92lT15PZbYNLny1Jl1ONQo3uOODGbcOz1e_bwD2-YEvdE5E4xsQ2rW6eCk1mYr5ioFmRBumPZfxXaHDff_HljDDqs_f9Yotj_aev8Uz3AW-9m4Fl0b6YzJOoQJ5mIiEOC9ikDsnvaeTqXke9GqQfhga7ZtudkNVJRAwCUHQ9onzGiPp9p3kRpT2SZ6ob8lbKtkOeFzHK9jx9FKtDOMADd8-gvhlb_UJOL7xU3Sc0S2BzZPsSkcAbx2z3S2CuD3zGAGqPFtWn66RKpZT9EtLxTYP1BQoCiIVDDVWkFk5xW4_bqwxCQro6ymnf3omzkl0WA1_K4xSbVvbTMSQ7aovq5KVMSSP6qm6YOgfBEIQSZDxSqJv3zYL8EK9QoDZcs8fvDqXpvbIIKiRCSdcXqN0h3vTuyP5xg5Gk_Lh6wANbrI04etWu8ZCQ7UP4hTzCwymN5wGc-jyTGNXNejnYtf4pFPepPakdj3nqlhAaBFV12cBqaLEcRxO8Ilpq_S2n6ByI9bIpdoQhJcUtLoHw6gPLQq4q2v3X53qUW6d1r1Nk8K3pvYN_08ANhVpO9IGKnybejLq8yZUy2T5AnL5fzTreEwOknQ_Co6PisZeeo3riEXUYG-Jgt-mNqUwLfGirhh6FESyRvbFAc3Ia86BS5hP6a2CPXY"
        InvalidCredentials:
          description: "Invalid username and/or password"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "401"
                  message:
                    type: string
                    example: "Invalid credentials."
        JWTTokenError:
          description: "JWT Token Invalid - See schemas for possible messages"
          content:
            application/json:
              schema:
                oneOf:
                  - ref: "#/components/schemas/JWTTokenMissing"
                  - ref: "#/components/schemas/JWTTokenExpired"
                  - ref: "#/components/schemas/JWTTokenInvalid"
                example:
                  code: 401
                  message : "JWT Token Not Found"

    tags:
      - name: Security
        description: Use yours credentials to get a authentication token
      - name: Products
        description: List and manage mobile phones
      - name: Brands
        description: List and manage mobile phone brands
      - name: Users
        description: Manage users registered by companies.
      - name: Companies
        description: Only Bilemo admin can List and manage companies.
      - name: Misc
        description: Other resources



    paths:
      /api/doc.json:
        get:
          tags:
            - Misc
          summary:
            Get the API documentation in Json format
          security: []
          responses:
            '200':
              description : This documentations in Json format
      /api/login_check:
        post:
          security: []
          tags:
            - Security
          summary: "Retrieve your JWT Token"
          description: "Retrieve your JWT Token by sending your username/password, Bilemo API use the Bearer scheme"
          requestBody:
            ref: "#/components/requestBodies/LoginCheck"
          responses:
            '200':
              ref: "#/components/responses/Token"
            '401':
              ref: "#/components/responses/InvalidCredentials"
            '400':
              ref: "#/components/responses/BadParameters"

  areas: # to filter documented areas
    path_patterns:
      - ^/api(?!/doc$) # Accepts routes under /api except /api/doc
  models:
    names:
      - { alias: Brand, type: App\Dto\BrandDto, groups: [ show_brand ] }
      - { alias: BrandsIndex, type: App\Dto\BrandDto, groups: [ list_brands ] }
      - { alias: BrandProducts, type: App\Dto\ProductDto, groups: [ show_brand ] }
      - { alias: ProductsIndex, type: App\Dto\ProductDto, groups: [ list_products ] }
      - { alias: Product, type: App\Dto\ProductDto, groups: [ show_product ] }
      - { alias: ProductBrand, type: App\Dto\BrandDto, groups: [ show_product ] }
      - { alias: UsersIndex, type: App\Dto\UserDto, groups: [ list_users ] }
      - { alias: User, type: App\Dto\UserDto, groups: [ show_user ] }
      - { alias: CompaniesIndex, type: App\Dto\CompanyDto, groups: [ list_companies ] }
      - { alias: CompanyUsers, type: App\Dto\UserDto, groups: [ show_company ] }
      - { alias: Company, type: App\Dto\CompanyDto, groups: [ show_company ] }
